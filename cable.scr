(defun c:main ()
  (setq osmodo (getvar "osmode"))
  (setvar "osmode" 0)
  (command "layer" "s" "0" "")
  (command "ucs" "w")

  ;<-- Definicion de funciones  -->

;<-- Cable Enchufe -->
  (defun cable_enchufe ( )

    (command "ucs" "y" 90)

    ;<-- Variables -->
      (setq puntoin (list 0 0 0))
      (setq puntoaux(list 0 0 0))

      (setq cubre_radio 0.8)
      (setq cubre_largo 1.5)

      (setq cable_radio 0.5)
      (setq cable_largo 50)

      (setq enchufe_radio 2)
      (setq enchufe_largo 3)

      (setq conector_radio 0.25)
      (setq conector_largo 2)
      (setq conector_x 0.5)
      (setq conector_y 0.1)

    ;<-- Cubre cable -->
      (command "cylinder" puntoin cubre_radio cubre_largo)
      (setq cubre (ENTLAST))

    ;<-- Cable -->
      (setq puntoaux (list (car puntoaux) (cadr puntoin) (+ (caddr puntoin) cubre_largo) ))
      (command "cylinder" puntoaux cable_radio cable_largo)
      (setq cable (ENTLAST))

    ;<-- Post Cubre Cable -->
      (setq puntoaux (list (car puntoaux) (cadr puntoin) (+ (caddr puntoin) cable_largo cubre_largo )))
      (command "copy" cubre "" "d" puntoaux) ;crea la copia del cubre del otro extremo
      (setq cubre2 (ENTLAST))
    ;<-- Union del Cable y Cubres -->
      (command "union" cable cubre cubre2 "")
      (setq cable (ENTLAST))


    ;<-- Base enchufe -->
      (setq puntoaux (list (car puntoin) (cadr puntoin) (+ (caddr puntoin) cubre_largo cable_largo cubre_largo enchufe_radio)))
      (command "sphere" puntoaux enchufe_radio)
      (setq base_enchufe1 (ENTLAST))
      (command "cylinder" puntoaux enchufe_radio enchufe_largo)
      (setq base_enchufe2 (ENTLAST))
    ;<-- Union base enchufe -->
      (command "union" base_enchufe1 base_enchufe2 "") ;crea Enchufe Base
      (setq base_enchufe (ENTLAST))

    ;<-- Conectores -->
      ;<-- 2 Patitas Circular
        (defun conector_circular ()
          (setq puntoaux (list (car puntoaux) (+ (cadr puntoaux) (/ enchufe_radio 2)) (+ (caddr puntoaux) enchufe_largo) ))
          (command "cylinder" puntoaux conector_radio conector_largo)
          (setq conector_1a (ENTLAST))

          (setq punto2 (list (car puntoaux) (cadr puntoaux) (+ (caddr puntoaux) conector_largo) ))
          (command "sphere" punto2 conector_radio)
          (setq conector_1b (ENTLAST))

          (command "union" conector_1a conector_1b "") ;crea conector
          (setq conector_mitad (ENTLAST))

          (setq mirror_punto  (list (car puntoin) (cadr puntoin) ))
          (setq mirror_punto2 (list (+ (car puntoin) enchufe_radio) (cadr puntoin) ))

          (command "mirror" conector_mitad "" mirror_punto mirror_punto2 "n" "" )
          (setq conector_mitad2 (ENTLAST))

          (command "union" conector_mitad conector_mitad2 "") ;unifica conector
          (setq conector (ENTLAST))
        )
      ;<-- Conector 2 patitas rectas  -->
        (defun conector_recto ()
            (setq puntoaux_a (list (+ (car puntoaux) conector_x ) (+ (cadr puntoaux) (/ enchufe_radio 2) conector_y) (+ (caddr puntoaux) enchufe_largo) ))
            (setq puntoaux_b (list (- (car puntoaux) conector_x ) (+ (cadr puntoaux) (/ enchufe_radio 2))             (+ (caddr puntoaux) enchufe_largo) ))

            (command "box" puntoaux_a puntoaux_b conector_largo) ;Crea conector
            (setq conector (ENTLAST))

            ;Intento fallido de hacer huequito en el conector (command "ucs" "w" "")
            ;Intento fallido de hacer huequito en el conector (command "ucs" "x" -90 "")
            ;Intento fallido de hacer huequito en el conector (setq puntoaux1 (list (+ caddr puntoaux (- enchufe_largo 1 )) 0 0))
            ;Intento fallido de hacer huequito en el conector (command "cylinder" puntoaux1 200 100 "" )
            ;Intento fallido de hacer huequito en el conector   (setq hueco (ENTLAST))
            ;Intento fallido de hacer huequito en el conector (command "ucs" "w" "")
            ;Intento fallido de hacer huequito en el conector (command "ucs" "y" 90 "")

            ;Intento fallido de hacer huequito en el conector (command "substract" conector "" hueco ) ;Crea el huequito

            (setq mirror_punto  (list (car puntoin) (cadr puntoin) ))
            (setq mirror_punto2 (list (+ (car puntoin) enchufe_radio) (cadr puntoin) ))

            (command "mirror" conector "" mirror_punto mirror_punto2 "n" "" ) ;Crea el mirror del conector
            (setq conector2 (ENTLAST))

            (command "union" conector conector2 "")
            (setq conector (ENTLAST)) ; unifica los conectores
        )
      ;<-- Conector 2 patitas diagonal -->
        (defun conector_diagonal () (alert "deja de tirar error ")
        )

      ;<-- Conector 3 patitas redondas (Brasilero) -->
        (defun conector_brasilero ()
          (setq puntoaux (list (car puntoaux) (+ (cadr puntoaux) (/ enchufe_radio 2)) (+ (caddr puntoaux) enchufe_largo) ))
          (command "cylinder" puntoaux conector_radio conector_largo)
          (setq conector_1a (ENTLAST))

          (setq punto2 (list (car puntoaux) (cadr puntoaux) (+ (caddr puntoaux) conector_largo) ))
          (command "sphere" punto2 conector_radio)
          (setq conector_1b (ENTLAST))

          (command "union" conector_1a conector_1b "") ;crea conector
          (setq conector_mitad (ENTLAST))

          (setq mirror_punto  (list (car puntoin) (cadr puntoin) ))
          (setq mirror_punto2 (list (+ (car puntoin) enchufe_radio) (cadr puntoin) ))

          (command "mirror" conector_mitad "" mirror_punto mirror_punto2 "n" "" )
          (setq conector_mitad2 (ENTLAST))

          (setq punto3 (list 0 (- (/ enchufe_radio 2)) 0 ))
          (command "copy" conector_mitad "" "d" punto3 "" )
          (setq conector_mitad3 (ENTLAST))

          (command "union" conector_mitad conector_mitad2 conector_mitad3 "") ;unifica conector
          (setq conector (ENTLAST))
        )

    ;<-- Seleccionador de Conector -->
    (ALERT "Seleccione el conector deseado")
      (setq opF (getstring "Circular-> C | Recto-> R | Diagonal-> D | Brasilero-> B :\n"))
      (cond
        ((= opF "C") (conector_circular))
        ((= opF "R") (conector_recto))
        ((= opF "D") (conector_diagonal))
        ((= opF "B") (conector_brasilero))
      )

    ;<-- Union de Base Enchufe Conector Cable -->
    (command "union" cable base_enchufe conector"") ; unifica base con los conectores ya unificados
  )
;<-- Comienzo del programa -->
  (cable)
  (enchufe)
;<-- Devuelve variables de usario -->
(setvar "osmode" osmodo)
)
